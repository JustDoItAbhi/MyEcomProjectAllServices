Parameters
HttpServletRequest request
Represents the incoming HTTP request that initiated the login process. It contains details such as headers, parameters, and session data.

HttpServletResponse response
Represents the HTTP response sent back to the user after the login is processed.

Authentication authentication
Holds the authentication details of the successfully logged-in user. This object contains information such as the user's principal, credentials, and authorities.

Steps in the Method
OidcUser user = (OidcUser) authentication.getPrincipal();
What it does: Extracts the authenticated user's principal object from the Authentication object.
Why cast to OidcUser?
Since this is an OAuth2 login, the authentication.getPrincipal() returns an instance of OidcUser, which represents the logged-in user's profile as per the OpenID Connect standard.
String email = user.getEmail();
What it does: Fetches the user's email address from the OidcUser profile.
Why is this important?
The email is required to notify the user about the successful login.
String name = user.getFullName();
What it does: Retrieves the user's full name from the OidcUser profile.
Usage: Used to personalize the notification email's content.
emailService.sendLoginNotification(email, name);
What it does: Sends an email notification to the user. This uses a service (EmailService) that encapsulates the email-sending logic.
Purpose: Keeps the user informed about login events for security and awareness.
response.sendRedirect("/");
What it does: Redirects the user to the home page (or any default page) after the login process is completed.
Why use this?
Once authentication is successful, the user should be redirected to a meaningful destination rather than staying on the OAuth2 login page.
How It Fits into OAuth2 Flow
When the user successfully logs in via an OAuth2 provider (e.g., Google, Facebook), Spring Security invokes this handler.
This handler:
Extracts user details.
Sends a login notification email.
Redirects the user to the desired location.
Customization Opportunities
Additional Logging
Log successful login events for auditing purposes.

Redirect to Dynamic Pages
Use a query parameter or session attribute to dynamically redirect users to their intended destination instead of always using /.

Conditional Email Notifications
Check if the login is from a new device or location before sending an email.

This method ensures that users are promptly notified of their login activity while seamlessly completing the OAuth2 authentication flow. Let me know if you have further questions!